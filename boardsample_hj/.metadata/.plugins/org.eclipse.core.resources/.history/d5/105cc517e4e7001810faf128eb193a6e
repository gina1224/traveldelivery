package com.example.productReg;
import java.io.IOException;
import java.util.List;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.*;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.example.productReg.ProductDomain;

@Controller //현재 클래스를 스프링에서 관리하는 컨트롤러 bean으로 생성

@RequestMapping("/product/*")
public class productController {
	//로깅을 위한 변수
	private static final Logger logger = LoggerFactory.getLogger(productController.class);
	
		@Autowired
		private ProductService ProductService;
		

	@RequestMapping(value="read", produces="text/plain;charset=UTF-8")
	public ModelAndView read() throws Exception{
		ModelAndView popupPageR = new ModelAndView("productReg/read");
		popupPageR.addObject("fromNation",ProductService.findAllfromNations());
		popupPageR.addObject("toNation",ProductService.findAlltoNations());
		popupPageR.addObject("SIZE",ProductService.findAllSizes());
		popupPageR.addObject("WEIGHT",ProductService.findAllWeights());
		return popupPageR;
	}
	
	//bootstrap 예시 코드
	@RequestMapping(value="read2", produces="text/plain;charset=UTF-8")
	public ModelAndView read2() throws Exception{
		ModelAndView popupPageR = new ModelAndView("productReg/read2");
		popupPageR.addObject("fromNation",ProductService.findAllfromNations());
		popupPageR.addObject("toNation",ProductService.findAlltoNations());
		popupPageR.addObject("SIZE",ProductService.findAllSizes());
		popupPageR.addObject("WEIGHT",ProductService.findAllWeights());
		return popupPageR;
	}
	
	@RequestMapping(value="update", produces="text/plain;charset=UTF-8")
	public ModelAndView update(@RequestParam String PNAME, @RequestParam double PRICE, 
			@RequestParam int COUNT, @RequestParam int fromNATION, 
			@RequestParam int toNATION, @RequestParam int SIZE, @RequestParam int WEIGHT, 
			@RequestParam String url) throws IOException{
		
		ProductDomain product = new ProductDomain();
		String f_nation = ProductService.findCodeName(fromNATION);
		String t_nation = ProductService.findCodeName(toNATION);
		String sizeStr = ProductService.findCodeName(SIZE);
		String weightStr = ProductService.findCodeName(WEIGHT);
		product.setCount(COUNT);
		product.setFrom_nation(fromNATION);
		product.setPname(PNAME);
		product.setPrice(PRICE);
		product.setSize(SIZE);
		product.setTo_nation(toNATION);
		product.setWeight(WEIGHT);
		product.setStrFROM_NATION(f_nation);
		product.setStrSIZE(sizeStr);
		product.setStrTO_NATION(t_nation);
		product.setStrWEIGHT(weightStr);
		product.setUrl(url);
		
		logger.info("POST /board : " + product.toString());
	
		Document doc = Jsoup.connect(url).get();
		String title = "";
		for(Element meta : doc.select("meta")) {
			if(meta.attr("name")==""){
				System.out.println("Property: " + meta.attr("property") + " - Content: " + meta.attr("content"));
				if(meta.attr("property").equals("og:title")){
					title = meta.attr("content");
					if(title.length()>100)
						title = title.substring(0, 100);
					product.setOg_title(title);
				}
				else if(meta.attr("property").equals("og:image"))
					product.setOg_image(meta.attr("content"));
				else if(meta.attr("property").equals("og:url"))
					product.setOg_url(meta.attr("content"));
				else if(meta.attr("property").equals("product:price:amount"))
					product.seturlPrice(meta.attr("content"));
				else if(meta.attr("property").equals("product:price:currency"))
					product.setCurrency(meta.attr("content"));
			}
			else
				System.out.println("Name: " + meta.attr("name") + " - Content: " + meta.attr("content"));
		}
		

		ProductService.insertProduct(product);
		System.out.println("ID:"+product.getID());
		ModelAndView productPage = new ModelAndView("productBoard/productDetail");
		productPage.addObject("product",product);
		return productPage;
	}
	@RequestMapping("list.do")
	public ModelAndView list(ModelAndView mav){
		mav.setViewName("productBoard/board_home");
		mav.addObject("list",ProductService.listProduct());
		return mav;
	}
	@RequestMapping("detail/{ID}")
	public ModelAndView detail(@PathVariable("ID") int ID, ModelAndView mav)
	{
		mav.setViewName("productBoard/productDetail");
		mav.addObject("product", ProductService.detailProduct(ID));
		return mav;
	}
	
}